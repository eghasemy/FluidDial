; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = m5dial, cyddial

[common]
build_flags = 
    !python ./git-version.py
    -DJSP_USE_CHARP
    -DE4_POS_T
    -DVERBATIM_GCODE_MODES
lib_deps =
    https://github.com/MitchBradley/json-streaming-parser#charp-1.0.2
    https://github.com/MitchBradley/GrblParser#9108f54
build_src_filter = +<*.c> +<*.h> +<*.cpp> +<*.hpp> +<net/*> -<System*.cpp> -<Hardware*.cpp> +<System.cpp> -<Touch_Class.cpp>

[env:m5dial]
; Pendant based on M5Dial
; http://wiki.fluidnc.com/en/hardware/official/M5Dial_Pendant
platform = espressif32
board = m5stack-stamps3
framework = arduino
platform_packages =
    platformio/framework-arduinoespressif32@3.20017.0
monitor_filters=esp32_exception_decoder
board_build.filesystem = littlefs
upload_flags=--no-stub
lib_deps =
    ${common.lib_deps}
    m5stack/M5Unified
    m5stack/M5Dial
build_flags =
    ${common.build_flags}
    -DUSE_M5
    -DFNC_BAUD=1000000
    -DDEBUG_TO_USB
custom_filesystem_start=0x670000
extra_scripts = ./build_merged.py
build_src_filter = ${common.build_src_filter} +<SystemArduino.cpp> +<HardwareM5Dial.cpp>

[env:cyd_base]
; Pendant based on a 2432S028 "Cheap Yellow Display" and a hand wheel pulse encoder
; http://wiki.fluidnc.com/en/hardware/official/CYD_Dial_Pendant
platform = espressif32
board = esp32dev
framework = arduino
platform_packages =
    platformio/framework-arduinoespressif32@^3.20016.0
monitor_filters=esp32_exception_decoder
monitor_speed=115200
upload_speed=921600
board_build.filesystem = littlefs
upload_flags=--no-stub
lib_deps =
    ${common.lib_deps}
    ; m5stack/M5Unified
    LovyanGFX=https://github.com/lovyan03/LovyanGFX#develop
build_flags =
    ${common.build_flags}
    -DUSE_LOVYANGFX
    -DFNC_BAUD=1000000
    ;-DCORE_DEBUG_LEVEL=5
    -DCYD_BUTTONS
custom_filesystem_start=0x290000
extra_scripts = ./build_merged.py
build_src_filter = ${common.build_src_filter} +<SystemArduino.cpp> +<Hardware2432.cpp> +<Touch_Class.cpp> -<cyd/*>

# This works for both resistive and capacitive CYDs, chosen at initial startup
[env:cyddial]
extends = env:cyd_base
build_flags =
    ${env:cyd_nodebug.build_flags}
    -DCYD_BUTTONS
    -DRESISTIVE_CYD
    -DCAPACITIVE_CYD

# Test build with WiFi pendant modules enabled  
[env:m5dial_wifi_test]
extends = env:m5dial
lib_deps =
    ${env:m5dial.lib_deps}
    ArduinoJson
build_flags =
    ${env:m5dial.build_flags}
    -DUSE_WIFI_PENDANT

# CYD build with WiFi pendant modules enabled
[env:cyd_wifi]
extends = env:cyddial
lib_deps =
    ${env:cyddial.lib_deps}
    links2004/WebSockets
    ArduinoJson
build_flags =
    ${env:cyddial.build_flags}
    -DUSE_WIFI_PENDANT

# This is the original CYD build for a resistive CYD
[env:cyd_resistive]
extends = env:cyd_base
build_flags =
    ${env:cyd_base.build_flags}
    -DDEBUG_TO_USB
    -DRESISTIVE_CYD

# This is for a capacitive CYD without buttons or lockout
[env:cyd_nodebug]
extends = env:cyd_base
build_flags =
    ${env:cyd_base.build_flags}
    -DCAPACITIVE_CYD

# This is for a capacitive CYD with physical buttons
[env:cyd_buttons]
extends = env:cyd_nodebug
build_flags =
    ${env:cyd_nodebug.build_flags}
    -DCYD_BUTTONS

[env:windows]
; Runs the code under Windows, useful for development
lib_deps =
    ${common.lib_deps}
    m5stack/M5Unified@^0.1.10
platform = native
build_type = release
build_flags = -O0 -xc++ -std=c++17 -lSDL2
  ${common.build_flags}
  -DWINDOWS
  -DUSE_M5
  -DM5GFX_BOARD=board_M5Dial
  -I"C:/msys64/mingw32/include/SDL2"         ; for Windows SDL2
  -L"C:/msys64/mingw32/lib"                  ; for Windows SDL2
build_src_filter = ${common.build_src_filter} +<SystemWindows.cpp> -<Encoder.cpp>
